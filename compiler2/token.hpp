#ifndef TOKEN_HPP
#define TOKEN_HPP

#include <string>

using namespace std;

enum TokenType {
	INT,
	STRING,
	LABEL,
	OPERAND,
	OPENPARAN,
	CLOSEPARAN,
	OPENCURLY,
	CLOSECURLY,
	VAR,
	FUNC,
	COMMA,
	EQUALS,
	PERIOD,
	IF,
	ELSE,
	RETURN,
	BREAK,
	WHILE,
	LOOP,
	UNTIL,
	END,
	COLON,
	RETURNS,
	AT,
	AND,
	OR,
	ERROR,
};

struct TokenPosition {
	int line;
	int column;
};

/**
 * @brief A token generated by the tokenizer
 * 
 */
class Token {

public:
	/**
	 * @brief Construct a new Token object from the beggining of the string
	 * 
	 * @param data The data to load the token from
	 */
	Token(string);



	TokenType type;
	std::string content;

	/**
	 * @brief The line position
	 * 
	 */
	TokenPosition position;

	/**
	 * @brief The chars used from the data input
	 * 
	 */
	int charOffset;

	operator std::string() const;

	static Token createEnd();

private:
	Token();

	static Token createSpecial(string s);
	static Token createInt(string s);
	static Token createString(string s);
	static Token createLabel(string s);
	static Token createOperand(string s);

};

std::vector<Token> tokenize(std::string data);
std::string tokenTypeString(TokenType t);


#endif
